// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!! This file is auto-generated by Reflang. !!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#include <string>

#include "lib/reflang.hpp"

namespace reflang
{


template <>
class Function<decltype(Func), Func> : public IFunction
{
	int GetParameterCount() const override;

	const std::string& GetName() const override;

	Object Invoke(const std::vector<Object>& args) override;
};



template <>
class Function<decltype(Func2), Func2> : public IFunction
{
	int GetParameterCount() const override;

	const std::string& GetName() const override;

	Object Invoke(const std::vector<Object>& args) override;
};



template <>
class Function<decltype(Func3), Func3> : public IFunction
{
	int GetParameterCount() const override;

	const std::string& GetName() const override;

	Object Invoke(const std::vector<Object>& args) override;
};


}  // namespace reflang
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!! This file is auto-generated by Reflang. !!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#include <algorithm>
#include <cassert>
#include <stdexcept>
#include <type_traits>

namespace reflang
{


int Function<decltype(Func), Func>::GetParameterCount() const
{
	return 1;
}

static const std::string Func_name = "Func";

const std::string& Function<decltype(Func), Func>::GetName() const
{
	return Func_name;
}

Object Function<decltype(Func), Func>::Invoke(const std::vector<Object>& args)
{
	if (args.size() != 1)
	{
		throw std::invalid_argument("count");
	}
	if (!args[0].IsT<std::decay_t<int>>())
	{
		throw std::invalid_argument("a");
	}

	Func(args[0].GetT<std::decay_t<int>>());
	return Object();
}

namespace
{
	// Object to auto-register Func.
	struct Func_registrar
	{
		Func_registrar()
		{
			::reflang::registry::internal::Register(
				std::make_unique<
					Function<
						decltype(Func),
						Func>>());
		}
	} Func_instance;
}



int Function<decltype(Func2), Func2>::GetParameterCount() const
{
	return 2;
}

static const std::string Func2_name = "Func2";

const std::string& Function<decltype(Func2), Func2>::GetName() const
{
	return Func2_name;
}

Object Function<decltype(Func2), Func2>::Invoke(const std::vector<Object>& args)
{
	if (args.size() != 2)
	{
		throw std::invalid_argument("count");
	}
	if (!args[0].IsT<std::decay_t<int>>())
	{
		throw std::invalid_argument("a");
	}
	if (!args[1].IsT<std::decay_t<float>>())
	{
		throw std::invalid_argument("b");
	}

	return Object(Func2(args[0].GetT<std::decay_t<int>>(), args[1].GetT<std::decay_t<float>>()));
}

namespace
{
	// Object to auto-register Func2.
	struct Func2_registrar
	{
		Func2_registrar()
		{
			::reflang::registry::internal::Register(
				std::make_unique<
					Function<
						decltype(Func2),
						Func2>>());
		}
	} Func2_instance;
}



int Function<decltype(Func3), Func3>::GetParameterCount() const
{
	return 1;
}

static const std::string Func3_name = "Func3";

const std::string& Function<decltype(Func3), Func3>::GetName() const
{
	return Func3_name;
}

Object Function<decltype(Func3), Func3>::Invoke(const std::vector<Object>& args)
{
	if (args.size() != 1)
	{
		throw std::invalid_argument("count");
	}
	if (!args[0].IsT<std::decay_t<const int &>>())
	{
		throw std::invalid_argument("a");
	}

	return Object(Func3(args[0].GetT<std::decay_t<const int &>>()));
}

namespace
{
	// Object to auto-register Func3.
	struct Func3_registrar
	{
		Func3_registrar()
		{
			::reflang::registry::internal::Register(
				std::make_unique<
					Function<
						decltype(Func3),
						Func3>>());
		}
	} Func3_instance;
}


}  // namespace reflang
