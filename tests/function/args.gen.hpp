// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!! This file is auto-generated by Reflang. !!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#include <algorithm>
#include <cassert>
#include <stdexcept>
#include <string>

#include "lib/reflang.hpp"

namespace reflang
{

template <>
class Function<decltype(Func), Func> : public IFunction
{
	int GetParameterCount() const override
	{
		return 1;
	}

	const std::string& GetName() const override
	{
		static const std::string name = "Func";
		return name;
	}

	Object Invoke(const std::vector<Object>& args) override
	{
		if (args.size() != 1)
		{
			throw std::invalid_argument("count");
		}
		if (!args[0].IsT<int>())
		{
			throw std::invalid_argument("a");
		}

		Func(args[0].GetT<int>());
		return Object();
	}
};

namespace
{
	// Object to auto-register Func.
	struct Func_registrar
	{
		Func_registrar()
		{
			::reflang::registry::internal::Register(
				std::make_unique<
					Function<
						decltype(Func),
						Func>>());
		}
	} Func_instance;
}


template <>
class Function<decltype(Func2), Func2> : public IFunction
{
	int GetParameterCount() const override
	{
		return 2;
	}

	const std::string& GetName() const override
	{
		static const std::string name = "Func2";
		return name;
	}

	Object Invoke(const std::vector<Object>& args) override
	{
		if (args.size() != 2)
		{
			throw std::invalid_argument("count");
		}
		if (!args[0].IsT<int>())
		{
			throw std::invalid_argument("a");
		}
		if (!args[1].IsT<float>())
		{
			throw std::invalid_argument("b");
		}

		return Object(Func2(args[0].GetT<int>(), args[1].GetT<float>()));
	}
};

namespace
{
	// Object to auto-register Func2.
	struct Func2_registrar
	{
		Func2_registrar()
		{
			::reflang::registry::internal::Register(
				std::make_unique<
					Function<
						decltype(Func2),
						Func2>>());
		}
	} Func2_instance;
}


}  // namespace reflang
