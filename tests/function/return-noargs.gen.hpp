// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!! This file is auto-generated by Reflang. !!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#include <string>

#include "lib/reflang.hpp"

namespace reflang
{


template <>
class Function<decltype(ns::NamespacedFunction), ns::NamespacedFunction> : public IFunction
{
	int GetParameterCount() const override;

	const std::string& GetName() const override;

	Object Invoke(const std::vector<Object>& args) override;
};



template <>
class Function<decltype(GlobalFunction), GlobalFunction> : public IFunction
{
	int GetParameterCount() const override;

	const std::string& GetName() const override;

	Object Invoke(const std::vector<Object>& args) override;
};



template <>
class Function<decltype(ReturnByValue), ReturnByValue> : public IFunction
{
	int GetParameterCount() const override;

	const std::string& GetName() const override;

	Object Invoke(const std::vector<Object>& args) override;
};



template <>
class Function<decltype(ReturnByReference), ReturnByReference> : public IFunction
{
	int GetParameterCount() const override;

	const std::string& GetName() const override;

	Object Invoke(const std::vector<Object>& args) override;
};


}  // namespace reflang
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!! This file is auto-generated by Reflang. !!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#include <algorithm>
#include <cassert>
#include <stdexcept>
#include <type_traits>

namespace reflang
{


int Function<decltype(ns::NamespacedFunction), ns::NamespacedFunction>::GetParameterCount() const
{
	return 0;
}

static const std::string ns__NamespacedFunction_name = "ns::NamespacedFunction";

const std::string& Function<decltype(ns::NamespacedFunction), ns::NamespacedFunction>::GetName() const
{
	return ns__NamespacedFunction_name;
}

Object Function<decltype(ns::NamespacedFunction), ns::NamespacedFunction>::Invoke(const std::vector<Object>& args)
{
	if (args.size() != 0)
	{
		throw std::invalid_argument("count");
	}

	return Object(ns::NamespacedFunction());
}

namespace
{
	// Object to auto-register ns::NamespacedFunction.
	struct ns__NamespacedFunction_registrar
	{
		ns__NamespacedFunction_registrar()
		{
			::reflang::registry::internal::Register(
				std::make_unique<
					Function<
						decltype(ns::NamespacedFunction),
						ns::NamespacedFunction>>());
		}
	} ns__NamespacedFunction_instance;
}



int Function<decltype(GlobalFunction), GlobalFunction>::GetParameterCount() const
{
	return 0;
}

static const std::string GlobalFunction_name = "GlobalFunction";

const std::string& Function<decltype(GlobalFunction), GlobalFunction>::GetName() const
{
	return GlobalFunction_name;
}

Object Function<decltype(GlobalFunction), GlobalFunction>::Invoke(const std::vector<Object>& args)
{
	if (args.size() != 0)
	{
		throw std::invalid_argument("count");
	}

	return Object(GlobalFunction());
}

namespace
{
	// Object to auto-register GlobalFunction.
	struct GlobalFunction_registrar
	{
		GlobalFunction_registrar()
		{
			::reflang::registry::internal::Register(
				std::make_unique<
					Function<
						decltype(GlobalFunction),
						GlobalFunction>>());
		}
	} GlobalFunction_instance;
}



int Function<decltype(ReturnByValue), ReturnByValue>::GetParameterCount() const
{
	return 0;
}

static const std::string ReturnByValue_name = "ReturnByValue";

const std::string& Function<decltype(ReturnByValue), ReturnByValue>::GetName() const
{
	return ReturnByValue_name;
}

Object Function<decltype(ReturnByValue), ReturnByValue>::Invoke(const std::vector<Object>& args)
{
	if (args.size() != 0)
	{
		throw std::invalid_argument("count");
	}

	return Object(ReturnByValue());
}

namespace
{
	// Object to auto-register ReturnByValue.
	struct ReturnByValue_registrar
	{
		ReturnByValue_registrar()
		{
			::reflang::registry::internal::Register(
				std::make_unique<
					Function<
						decltype(ReturnByValue),
						ReturnByValue>>());
		}
	} ReturnByValue_instance;
}



int Function<decltype(ReturnByReference), ReturnByReference>::GetParameterCount() const
{
	return 0;
}

static const std::string ReturnByReference_name = "ReturnByReference";

const std::string& Function<decltype(ReturnByReference), ReturnByReference>::GetName() const
{
	return ReturnByReference_name;
}

Object Function<decltype(ReturnByReference), ReturnByReference>::Invoke(const std::vector<Object>& args)
{
	if (args.size() != 0)
	{
		throw std::invalid_argument("count");
	}

	return Object(ReturnByReference());
}

namespace
{
	// Object to auto-register ReturnByReference.
	struct ReturnByReference_registrar
	{
		ReturnByReference_registrar()
		{
			::reflang::registry::internal::Register(
				std::make_unique<
					Function<
						decltype(ReturnByReference),
						ReturnByReference>>());
		}
	} ReturnByReference_instance;
}


}  // namespace reflang
